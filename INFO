# example test
import pickle, os, pandas

class MyEvilPickle(object):
    def __reduce__(self):
        return (os.system, ('whoami', ))

pickle_data = pickle.dumps(MyEvilPickle())
#storing the serialized output into a file in current directory
with open("backup.data", "wb") as file:
    file.write(pickle_data)

pandas.read_pickle("backup.data")

###

# call this file pickle_config.yml
# this is meant to configure pickle deserialization, which can be a security risk
 
# mode can be permit, deny, off
 
# permit means pickle is only allowed to load permitted libraries (safer option)
# deny means pickle is not allowed to load denied libraries (less safe option)
# off means no security and should only be used on safe pickles (least safe option)
mode: permit
 
# here you would list packages and classes that can be used
# this is how Python recommend you restrict pickling globals
# see https://docs.python.org/3/library/pickle.html#restricting-globals
permit:
  builtins: ['range', 'complex', 'set', 'frozenset', 'slice']
 
# here you would list packages and classes than cannot be used
# all others will be allowed if running on deny mode
# this is not as safe as the permit method
# see https://pythonmana.com/2022/143/202205231222219535.html
deny:
  builtins: ['eval', 'exec', 'execfile', 'compile', 'open', 'input', '__import__', 'exit']
  os: ['system']
