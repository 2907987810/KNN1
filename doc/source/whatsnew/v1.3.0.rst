.. _whatsnew_130:

What's new in 1.3.0 (??)
------------------------

These are the changes in pandas 1.3.0. See :ref:`release` for a full changelog
including other versions of pandas.

{{ header }}

.. ---------------------------------------------------------------------------

Enhancements
~~~~~~~~~~~~


.. _whatsnew_130.enhancements.other:

Other enhancements
^^^^^^^^^^^^^^^^^^

- Added :meth:`MultiIndex.dtypes` (:issue:`37062`)
-

.. ---------------------------------------------------------------------------

.. _whatsnew_130.notable_bug_fixes:

Notable bug fixes
~~~~~~~~~~~~~~~~~

These are bug fixes that might have notable behavior changes.

Assigning with ``DataFrame.__setitem__`` consistently creates a new array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Assigning values with ``DataFrame.__setitem__`` now consistently assigns a new array, rather than mutating inplace (:issue:`33457`, :issue:`35271`, :issue:`35266`)

Previously, ``DataFrame.__setitem__`` would sometimes operate inplace on the
underlying array, and sometimes assign a new array. Fixing this inconsistency
can have behavior-changing implications for workloads that relied on inplace
mutation. The two most common cases are creating a ``DataFrame`` from an array
and slicing a ``DataFrame``.

*Previous Behavior*

The array would be mutated inplace for some dtypes, like NumPy's ``int64`` dtype.

.. code-block:: python

   >>> import pandas as pd
   >>> import numpy as np
   >>> a = np.array([1, 2, 3])
   >>> df = pd.DataFrame(a, columns=['a'])
   >>> df['a'] = 0
   >>> a  # mutated inplace
   array([0, 0, 0])

But not others, like :class:`Int64Dtype`.

.. code-block:: python

   >>> import pandas as pd
   >>> import numpy as np
   >>> a = pd.array([1, 2, 3], dtype="Int64")
   >>> df = pd.DataFrame(a, columns=['a'])
   >>> df['a'] = 0
   >>> a  # not mutated
   <IntegerArray>
   [1, 2, 3]
   Length: 3, dtype: Int64


*New Behavior*

In pandas 1.3.0, ``DataFrame.__setitem__`` consistently sets on a new array rather than
mutating the existing array inplace.

For NumPy's int64 dtype

.. ipython:: python

   import pandas as pd
   import numpy as np
   a = np.array([1, 2, 3])
   df = pd.DataFrame(a, columns=['a'])
   df['a'] = 0
   a  # not mutated

For :class:`Int64Dtype`.

.. ipython:: python

   import pandas as pd
   import numpy as np
   a = pd.array([1, 2, 3], dtype="Int64")
   df = pd.DataFrame(a, columns=['a'])
   df['a'] = 0
   a  # not mutated

This also affects cases where a second ``Series`` or ``DataFrame`` is a view on a first ``DataFrame``.

.. code-block:: python

   df = pd.DataFrame({"A": [1, 2, 3]})
   df2 = df[['A']]
   df['A'] = np.array([0, 0, 0])

Previously, whether ``df2`` was mutated depending on the dtype of the array being assigned to. Now, a new array is consistently assigned, so ``df2`` is not mutated.

.. _whatsnew_130.api_breaking.deps:

Increased minimum versions for dependencies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Some minimum supported versions of dependencies were updated.
If installed, we now require:

+-----------------+-----------------+----------+---------+
| Package         | Minimum Version | Required | Changed |
+=================+=================+==========+=========+
| numpy           | 1.16.5          |    X     |         |
+-----------------+-----------------+----------+---------+
| pytz            | 2017.3          |    X     |         |
+-----------------+-----------------+----------+---------+
| python-dateutil | 2.7.3           |    X     |         |
+-----------------+-----------------+----------+---------+
| bottleneck      | 1.2.1           |          |         |
+-----------------+-----------------+----------+---------+
| numexpr         | 2.6.8           |          |         |
+-----------------+-----------------+----------+---------+
| pytest (dev)    | 5.0.1           |          |         |
+-----------------+-----------------+----------+---------+
| mypy (dev)      | 0.782           |          |         |
+-----------------+-----------------+----------+---------+

For `optional libraries <https://dev.pandas.io/docs/install.html#dependencies>`_ the general recommendation is to use the latest version.
The following table lists the lowest version per library that is currently being tested throughout the development of pandas.
Optional libraries below the lowest tested version may still work, but are not considered supported.

+-----------------+-----------------+---------+
| Package         | Minimum Version | Changed |
+=================+=================+=========+
| beautifulsoup4  | 4.6.0           |         |
+-----------------+-----------------+---------+
| fastparquet     | 0.3.2           |         |
+-----------------+-----------------+---------+
| fsspec          | 0.7.4           |         |
+-----------------+-----------------+---------+
| gcsfs           | 0.6.0           |         |
+-----------------+-----------------+---------+
| lxml            | 4.3.0           |         |
+-----------------+-----------------+---------+
| matplotlib      | 2.2.3           |         |
+-----------------+-----------------+---------+
| numba           | 0.46.0          |         |
+-----------------+-----------------+---------+
| openpyxl        | 2.6.0           |         |
+-----------------+-----------------+---------+
| pyarrow         | 0.15.0          |         |
+-----------------+-----------------+---------+
| pymysql         | 0.7.11          |         |
+-----------------+-----------------+---------+
| pytables        | 3.5.1           |         |
+-----------------+-----------------+---------+
| s3fs            | 0.4.0           |         |
+-----------------+-----------------+---------+
| scipy           | 1.2.0           |         |
+-----------------+-----------------+---------+
| sqlalchemy      | 1.2.8           |         |
+-----------------+-----------------+---------+
| tabulate        | 0.8.7           |    X    |
+-----------------+-----------------+---------+
| xarray          | 0.12.0          |         |
+-----------------+-----------------+---------+
| xlrd            | 1.2.0           |         |
+-----------------+-----------------+---------+
| xlsxwriter      | 1.0.2           |         |
+-----------------+-----------------+---------+
| xlwt            | 1.3.0           |         |
+-----------------+-----------------+---------+
| pandas-gbq      | 0.12.0          |         |
+-----------------+-----------------+---------+

See :ref:`install.dependencies` and :ref:`install.optional_dependencies` for more.

.. _whatsnew_130.api.other:

Other API changes
^^^^^^^^^^^^^^^^^

-
-

.. ---------------------------------------------------------------------------

.. _whatsnew_130.deprecations:

Deprecations
~~~~~~~~~~~~

-
-

.. ---------------------------------------------------------------------------


.. _whatsnew_130.performance:

Performance improvements
~~~~~~~~~~~~~~~~~~~~~~~~

-
-

.. ---------------------------------------------------------------------------

.. _whatsnew_130.bug_fixes:

Bug fixes
~~~~~~~~~

-
-

Categorical
^^^^^^^^^^^

-
-

Datetimelike
^^^^^^^^^^^^
- Bug in :class:`DataFrame` and :class:`Series` constructors sometimes dropping nanoseconds from :class:`Timestamp` (resp. :class:`Timedelta`) ``data``, with ``dtype=datetime64[ns]`` (resp. ``timedelta64[ns]``) (:issue:`38032`)
-
-

Timedelta
^^^^^^^^^

-
-

Timezones
^^^^^^^^^

-
-

Numeric
^^^^^^^
- Bug in :meth:`DataFrame.quantile`, :meth:`DataFrame.sort_values` causing incorrect subsequent indexing behavior (:issue:`38351`)
-
-

Conversion
^^^^^^^^^^
-
-

Strings
^^^^^^^

-
-

Interval
^^^^^^^^

-
-

Indexing
^^^^^^^^
- Bug in :meth:`CategoricalIndex.get_indexer` failing to raise ``InvalidIndexError`` when non-unique (:issue:`38372`)
- Bug in inserting many new columns into a :class:`DataFrame` causing incorrect subsequent indexing behavior (:issue:`38380`)
- Bug in :meth:`DataFrame.iloc.__setitem__` and :meth:`DataFrame.loc.__setitem__` with mixed dtypes when setting with a dictionary value (:issue:`38335`)
- Bug in :meth:`DataFrame.iloc.__setitem__` creating a new array instead of overwriting ``Categorical`` values in-place (:issue:`35417`)
-
-

Missing
^^^^^^^

-
-

MultiIndex
^^^^^^^^^^

-
-

I/O
^^^

- Bug in :func:`read_csv` raising ``TypeError`` when ``names`` and ``parse_dates`` is specified for ``engine="c"`` (:issue:`33699`)
-

Period
^^^^^^

-
-

Plotting
^^^^^^^^

-
-

Groupby/resample/rolling
^^^^^^^^^^^^^^^^^^^^^^^^

-
-

Reshaping
^^^^^^^^^

-
-

Sparse
^^^^^^

-
-

ExtensionArray
^^^^^^^^^^^^^^

-
-

Other
^^^^^

-
-

.. ---------------------------------------------------------------------------

.. _whatsnew_130.contributors:

Contributors
~~~~~~~~~~~~
