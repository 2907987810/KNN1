.. _whatsnew_0240:

v0.24.0
-------

.. _whatsnew_0240.enhancements:

New features
~~~~~~~~~~~~

.. _whatsnew_0240.enhancements.other:

.. _whatsnew_0240.enhancements.extension_array_operators

``ExtensionArray`` operator support
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A ``Series`` based on ``ExtensionArray`` now supports arithmetic and comparison
operators.  There are two approaches for providing operator support for an ExtensionArray:

1. Define each of the operators on your ExtensionArray subclass. 
2. Use an operator implementation from pandas that depends on operators that are already defined
   on the underlying elements (scalars) of the ExtensionArray.

To use the first approach where you define your own implementation of the operators,
you define each operator such as `__add__`, __le__`, etc. on your ExtensionArray
subclass.

For the second approach, which is appropriate if your ExtensionArray contains 
elements that already have the operators
defined on a per-element basis, pandas provides a mixin,
:class:`ExtensionScalarOpsMixin` that you can use that can
define the operators on your ExtensionArray subclass.
If developing an ``ExtensionArray`` subclass, for example ``MyExtensionArray``,
simply include ``ExtensionScalarOpsMixin`` as a parent class of ``MyExtensionArray``
and then call the methods :meth:`~MyExtensionArray._add_arithmetic_ops` and/or
:meth:`~MyExtensionArray._add_comparison_ops` to hook the operators into 
your ``MyExtensionArray`` class, as follows:

.. code-block:: python

    class MyExtensionArray(ExtensionArray, ExtensionScalarOpsMixin):
        pass
    
    MyExtensionArray._add_arithmetic_ops()
    MyExtensionArray._add_comparison_ops()

See the :ref:`ExtensionArray Operator Support
<extending.extension.operator>` documentation section for details on both 
ways of adding operator support.

Other Enhancements
^^^^^^^^^^^^^^^^^^
- :func:`to_datetime` now supports the ``%Z`` and ``%z`` directive when passed into ``format`` (:issue:`13486`)
- :func:`Series.mode` and :func:`DataFrame.mode` now support the ``dropna`` parameter which can be used to specify whether NaN/NaT values should be considered (:issue:`17534`)
- :func:`to_csv` now supports ``compression`` keyword when a file handle is passed. (:issue:`21227`)
-

.. _whatsnew_0240.api_breaking:


Backwards incompatible API changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. _whatsnew_0240.api.datetimelike:

Datetimelike API Changes
^^^^^^^^^^^^^^^^^^^^^^^^

- For :class:`DatetimeIndex` and :class:`TimedeltaIndex` with non-``None`` ``freq`` attribute, addition or subtraction of integer-dtyped array or ``Index`` will return an object of the same class (:issue:`19959`)

.. _whatsnew_0240.api.other:

Other API Changes
^^^^^^^^^^^^^^^^^

-
-
-

.. _whatsnew_0240.deprecations:

Deprecations
~~~~~~~~~~~~

-
-
-

.. _whatsnew_0240.prior_deprecations:

Removal of prior version deprecations/changes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- The ``LongPanel`` and ``WidePanel`` classes have been removed (:issue:`10892`)
-
-
-

.. _whatsnew_0240.performance:

Performance Improvements
~~~~~~~~~~~~~~~~~~~~~~~~

-
-
-

.. _whatsnew_0240.docs:

Documentation Changes
~~~~~~~~~~~~~~~~~~~~~

-
-
-

.. _whatsnew_0240.bug_fixes:

Bug Fixes
~~~~~~~~~

Categorical
^^^^^^^^^^^

-
-
-

Datetimelike
^^^^^^^^^^^^

-
-
-

Timedelta
^^^^^^^^^

-
-
-

Timezones
^^^^^^^^^

-
-
-

Offsets
^^^^^^^

-
-
-

Numeric
^^^^^^^

-
-
-

Strings
^^^^^^^

-
-
-

Indexing
^^^^^^^^

-
-
-

MultiIndex
^^^^^^^^^^

-
-
-

I/O
^^^

-
-
-

Plotting
^^^^^^^^

-
-
-

Groupby/Resample/Rolling
^^^^^^^^^^^^^^^^^^^^^^^^

-
-
-

Sparse
^^^^^^

-
-
-

Reshaping
^^^^^^^^^

-
-
-

Other
^^^^^

-
-
-
