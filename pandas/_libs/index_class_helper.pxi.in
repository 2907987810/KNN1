"""
Template for functions of IndexEngine subclasses.

WARNING: DO NOT edit .pxi FILE directly, .pxi is generated from .pxi.in
"""

#----------------------------------------------------------------------
# IndexEngine Subclass Methods
#----------------------------------------------------------------------

{{py:

# name, dtype, ctype
dtypes = [('Float64', 'float64', 'float64_t'),
          ('Float32', 'float32', 'float32_t'),
          ('Int64', 'int64', 'int64_t'),
          ('Int32', 'int32', 'int32_t'),
          ('Int16', 'int16', 'int16_t'),
          ('Int8', 'int8', 'int8_t'),
          ('UInt64', 'uint64', 'uint64_t'),
          ('UInt32', 'uint32', 'uint32_t'),
          ('UInt16', 'uint16', 'uint16_t'),
          ('UInt8', 'uint8', 'uint8_t'),
          ('Object', 'object', 'object'),
          ]
}}

{{for name, dtype, ctype in dtypes}}


cdef class {{name}}Engine(IndexEngine):

    _dtype = '{{dtype}}'

    def _call_monotonic(self, values):
        return algos.is_monotonic(values, timelike=False)

    def get_backfill_indexer(self, other, limit=None):
        return algos.backfill_{{dtype}}(self._get_index_values(),
                                        other, limit=limit)

    def get_pad_indexer(self, other, limit=None):
        return algos.pad_{{dtype}}(self._get_index_values(),
                                   other, limit=limit)

    cdef _make_hash_table(self, n):
        {{if name == 'Object'}}
        return _hash.PyObjectHashTable(n)
        {{elif name in {'Int8', 'Int16', 'Int32'} }}
        # {{name}}HashTable is not available, so we use Int64HashTable
        return _hash.Int64HashTable(n)
        {{elif name in {'UInt8', 'UInt16', 'UInt32'} }}
        # {{name}}HashTable is not available, so we use UInt64HashTable
        return _hash.UInt64HashTable(n)
        {{elif name in {'Float32'} }}
        # {{name}}HashTable is not available, so we use Float64HashTable
        return _hash.Float64HashTable(n)
        {{else}}
        return _hash.{{name}}HashTable(n)
        {{endif}}

    {{if name in {'Int8', 'Int16', 'Int32'} }}
    cpdef _call_map_locations(self, values):
        # self.mapping is of type Int64HashTable, so convert dtype of values
        self.mapping.map_locations(algos.ensure_int64(values))
    {{elif name in {'UInt8', 'UInt16', 'UInt32'} }}
    cpdef _call_map_locations(self, values):
        # self.mapping is of type UInt64HashTable, so convert dtype of values
        self.mapping.map_locations(algos.ensure_uint64(values))
    {{elif name in {'Float32'} }}
    cpdef _call_map_locations(self, values):
        # self.mapping is of type Float64HashTable, so convert dtype of values
        self.mapping.map_locations(algos.ensure_float64(values))
    {{endif}}

    {{if name != 'Float64' and name != 'Object'}}
    cdef _check_type(self, object val):
        hash(val)
        if util.is_bool_object(val):
            raise KeyError(val)
        elif util.is_float_object(val):
            raise KeyError(val)
    {{endif}}

    {{if name != 'Object'}}
    cdef _get_index_values(self):
        return algos.ensure_{{dtype}}(self.vgetter())

    cdef _maybe_get_bool_indexer(self, object val):
        cdef:
            ndarray[uint8_t, ndim=1, cast=True] indexer
            ndarray[intp_t, ndim=1] found
            ndarray[{{ctype}}] values
            int count = 0

        {{if name not in {'Float64', 'Float32'} }}
        if not util.is_integer_object(val):
            raise KeyError(val)
        {{endif}}

        # A view is needed for some subclasses, such as PeriodEngine:
        values = self._get_index_values().view('{{dtype}}')
        indexer = values == val
        found = np.where(indexer)[0]
        count = len(found)

        if count > 1:
            return indexer
        if count == 1:
            return int(found[0])

        raise KeyError(val)

    {{endif}}

{{endfor}}
