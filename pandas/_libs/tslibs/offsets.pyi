# flake8: noqa

from typing import Dict, List, Set, Tuple

need_suffix: List[str]
_offset_to_period_map: Dict[str, str]

# ---------------------------------------------------------------------
# Misc Helpers

def to_offset(obj): ...
def as_datetime(obj): ...
def _is_normalized(dt) -> bool: ...
def apply_index_wraps(func): ...

# ---------------------------------------------------------------------
# Business Helpers

def get_lastbday(year: int, month: int) -> int: ...
def get_firstbday(year: int, month: int) -> int: ...
def _get_calendar(weekmask, holidays, calendar): ...
def _to_dt64(dt, dtype=...): ...

# ---------------------------------------------------------------------
# Constructor Helpers

relativedelta_kwds: Set[str]

# ---------------------------------------------------------------------
# Mixins & Singletons

class ApplyTypeError(TypeError): ...

# ---------------------------------------------------------------------
# Base Classes

class _BaseOffset:
    def __init__(self, n=..., normalize=...): ...
    def __setattr__(self, name, value): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    @property
    def _params(self) -> Tuple: ...
    @property
    def kwds(self): ...
    @property
    def base(self): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __call__(self, other): ...
    def __mul__(self, other): ...
    def __neg__(self): ...
    def copy(self): ...
    def __repr__(self): ...
    def __setstate__(self, state): ...
    def __getstate__(self): ...

class BaseOffset(_BaseOffset):
    def __rmul__(self, other): ...
    def __radd__(self, other): ...
    def __rsub__(self, other): ...

class _Tick:
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...

# ----------------------------------------------------------------------
# RelativeDelta Arithmetic

def shift_day(other, days: int): ...
def year_add_months(dts, months: int) -> int: ...
def month_add_months(dts, months: int) -> int: ...
def shift_quarters(
    dtindex, quarters: int, q1start_month: int, day, modby: int = ...
): ...
def shift_months(dtindex, months: int, day=...): ...
def shift_month(stamp, months: int, day_opt=...): ...
def get_day_of_month(other, day_opt) -> int: ...
def roll_convention(other: int, n: int, compare: int) -> int: ...
def roll_qtrday(other, n: int, month: int, day_opt, modby: int = ...) -> int: ...
def roll_yearday(other, n: int, month: int, day_opt) -> int: ...
