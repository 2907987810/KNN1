parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      ${{ if eq(parameters.name, 'macOS') }}:
        py38_macos_1:
          ENV_FILE: ci/deps/azure-macos-38.yaml
          CONDA_PY: "38"
          PATTERN: "not slow and not network"
          PYTEST_TARGET: "pandas/tests/[a-h]*"
        py38_macos_2:
          ENV_FILE: ci/deps/azure-macos-38.yaml
          CONDA_PY: "38"
          PATTERN: "not slow and not network"
          PYTEST_TARGET: "pandas/tests/[i-z]*"

  steps:
    - script: echo '##vso[task.prependpath]$(HOME)/miniconda3/bin'
      displayName: 'Set conda path'

    - task: Cache@2
      displayName: Use cached Anaconda environment
      inputs:
        key: 'conda | "$(Agent.OS)" | $(ENV_FILE)'
        path: $(HOME)/miniconda3
        restoreKeys: |
          python | "$(Agent.OS)"
          python
        cacheHitVar: CONDA_CACHE_RESTORED

    - script: ci/setup_conda.sh
      displayName: 'Install Miniconda in CI env'

    - script: ci/setup_env.sh
      displayName: 'Install conda dependencies and build pandas'
      condition: eq(variables.CONDA_CACHE_RESTORED, 'false')

    - script: |
        source activate pandas-dev
        ci/run_tests.sh
      displayName: 'Test'

    - script: source activate pandas-dev && pushd /tmp && python -c "import pandas; pandas.show_versions();" && popd
      displayName: 'Build versions'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        failTaskOnFailedTests: true
        testResultsFiles: 'test-data.xml'
        testRunTitle: ${{ format('{0}-$(CONDA_PY)', parameters.name) }}
      displayName: 'Publish test results'

    - script: |
        source activate pandas-dev
        python ci/print_skipped.py
      displayName: 'Print skipped tests'
