parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 90
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    matrix:
      # py38:
      #   ENV_FILE: ci/deps/actions-38.yaml
      #   CONDA_PY: "38"

      # py39:
      #   ENV_FILE: ci/deps/actions-39.yaml
      #   CONDA_PY: "39"

      py310:
        ENV_FILE: ci/deps/actions-310.yaml
        CONDA_PY: "310"

  steps:
    - script: |
        which conda
        conda env list
      displayName: 'conda list'

    - script: |
        set -eux
        # Workaround for mamba-org/mamba#488
        rm -f /usr/local/miniconda/pkgs/cache/*.json
        # Installing Mamba to a fresh env is much faster (5 min vs. 1 min)
        conda create -y -n mamba-env -c conda-forge 'mamba>=0.22'
        conda activate mamba-env
      displayName: Install Mamba

    - script: |
        set -eux

        # TODO: GH#44980 https://github.com/pypa/setuptools/issues/2941
        echo '  - setuptools <60' >> ${ENV_FILE}

        if [ "$(uname)" == Darwin ]; then
          # From pyarrow on MacOS
          # ImportError: 2): Library not loaded: @rpath/libssl.1.1.dylib
          # Referenced from: /Users/runner/miniconda3/envs/pandas-dev/lib/libthrift.0.13.0.dylib
          # Reason: image not found
          sed -i'' -e 's/^  - pyarrow$/  - pyarrow=6/' ${ENV_FILE}
        fi

        # See https://github.com/mamba-org/mamba/issues/633
        conda create -y -n pandas-dev
        time conda run --no-capture-output -n mamba-env mamba env update -n pandas-dev --file="${ENV_FILE}"

        set +e
        echo Have qt?
        conda list -n pandas-dev -f qt --json
        echo Have pandas?
        conda list -n pandas-dev -f pandas --json
        conda run --no-capture-output -n pandas-dev pip list | grep pandas
        set -e
      displayName: 'Setup Conda environment'

    - task: Cache@2
      inputs:
        key: sccache-0
        restoreKeys: |
          sccache-restore-0
        path: $(Pipeline.Workspace)/.sccache
      displayName: Sccache cache

    - script: |
        set -eux
        sccache_version=v0.2.15
        sccache_archive_name=sccache-$sccache_version-x86_64-apple-darwin
        curl -L https://github.com/mozilla/sccache/releases/download/$sccache_version/$sccache_archive_name.tar.gz \
          | tar xzf - -O $sccache_archive_name/sccache > /usr/local/bin/sccache
        chmod +x /usr/local/bin/sccache
        SCCACHE_IDLE_TIMEOUT=999999 SCCACHE_DIR=$(Pipeline.Workspace)/.sccache sccache --start-server
        sccache -s
        sccache -z
      displayName: Setup Sccache

    - script: |
        set -eux
        conda run --no-capture-output -n pandas-dev python --version
        conda run --no-capture-output -n pandas-dev python3 --version
        time DISTUTILS_C_COMPILER_LAUNCHER=sccache conda run --no-capture-output -n pandas-dev python3 setup.py build_ext -v -j3
        time conda run --no-capture-output -n pandas-dev python3 -m pip install --force-reinstall --no-build-isolation -e .
        sccache -s
      displayName: 'Build pandas'

#     - script: |
#         conda run --no-capture-output -n pandas-dev ci/run_tests.sh
#       displayName: 'Test'

#     - script: |
#         pushd /tmp
#         conda run --no-capture-output -n pandas-dev python -c "import pandas; pandas.show_versions()"
#         popd
#       displayName: 'Build versions'

#     - task: PublishTestResults@2
#       condition: succeededOrFailed()
#       inputs:
#         failTaskOnFailedTests: true
#         testResultsFiles: 'test-data.xml'
#         testRunTitle: ${{ format('{0}-$(CONDA_PY)', parameters.name) }}
#       displayName: 'Publish test results'
