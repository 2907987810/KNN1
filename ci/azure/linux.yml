parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 11
    matrix:
      # TODO remove, just comparing the speed travis/azure, single/multi-core
      py37_single_core:
        ENV_FILE: ci/deps/travis-37.yaml
        CONDA_PY: "37"
        PATTERN: "not slow and not network"

      # TODO remove, just comparing the speed travis/azure, single/multi-core
      py37_multi_core:
        ENV_FILE: ci/deps/travis-37.yaml
        CONDA_PY: "37"
        PATTERN: "not slow and not network"
        TESTS_JOBS: "auto"

      py27_np_120:
        ENV_FILE: ci/deps/azure-27-compat.yaml
        CONDA_PY: "27"
        PATTERN: "not slow and not network"

      py37_locale:
        ENV_FILE: ci/deps/azure-37-locale.yaml
        CONDA_PY: "37"
        PATTERN: "not slow and not network"
        LOCALE_OVERRIDE: "zh_CN.UTF-8"

      py36_locale_slow:
        ENV_FILE: ci/deps/azure-36-locale_slow.yaml
        CONDA_PY: "36"
        PATTERN: "not slow and not network"
        LOCALE_OVERRIDE: "it_IT.UTF-8"

  steps:
    - script: |
        if [ "$(uname)" == "Linux" ]; then sudo apt-get install -y libc6-dev-i386; fi
        echo "Installing Miniconda"{
        ci/incremental/install_miniconda.sh
        export PATH=$HOME/miniconda3/bin:$PATH
        echo "Setting up Conda environment"
        ci/incremental/setup_conda_environment.sh
      displayName: 'Before Install'
    - script: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/incremental/build.sh
      displayName: 'Build'
    - script: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        python ci/run_tests.py
      displayName: 'Test'
    - script: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev && pushd /tmp && python -c "import pandas; pandas.show_versions();" && popd
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'test-data.xml'
        testRunTitle: 'Linux'
    - powershell: |
        $junitXml = "test-data.xml"
        $(Get-Content $junitXml | Out-String) -match 'failures="(.*?)"'
        if ($matches[1] -eq 0)
        {
          Write-Host "No test failures in test-data"
        }
        else
        {
          # note that this will produce $LASTEXITCODE=1
          Write-Error "$($matches[1]) tests failed"
        }
      displayName: Check for test failures
