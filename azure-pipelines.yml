# Adapted from https://github.com/numba/numba/blob/master/azure-pipelines.yml
jobs:
# Mac and Linux could potentially use the same template
# except it isn't clear how to use a different build matrix
# for each, so for now they are separate
- template: ci/azure/macos.yml
  parameters:
    name: macOS
    vmImage: xcode9-macos10.13
- template: ci/azure/linux.yml
  parameters:
    name: Linux
    vmImage: ubuntu-16.04

# Windows Python 2.7 needs VC 9.0 installed, and not sure
# how to make that a conditional task, so for now these are
# separate templates as well
- template: ci/azure/windows.yml
  parameters:
    name: Windows
    vmImage: vs2017-win2016
- template: ci/azure/windows-py27.yml
  parameters:
    name: WindowsPy27
    vmImage: vs2017-win2016

- job: 'Checks_and_doc'
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'

  - script: |
      # XXX not sure why setting $PATH here does not work
      # echo '##vso[task.setvariable variable=PATH]$HOME/miniconda3/bin:$PATH'
      echo '##vso[task.setvariable variable=CONDA_ENV]pandas'
      echo '##vso[task.setvariable variable=ENV_FILE]environment.yml'
      echo '##vso[task.setvariable variable=AZURE]true'
    displayName: 'Setting environment variables'

  # Does not require a conda environment
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh patterns
    displayName: 'Looking for unwanted patterns'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      sudo apt-get install -y libc6-dev-i386
      ci/incremental/install_miniconda.sh
      ci/incremental/setup_conda_environment.sh
    displayName: 'Set up environment'

  # Does not require pandas
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh lint
    displayName: 'Linting'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh code
    displayName: 'Checks on imported code'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh dependencies
    displayName: 'Dependencies consistency'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/incremental/build.sh
    displayName: 'Build'
    condition: true

  # Requires pandas
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh doctests
    displayName: 'Running doctests'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh docstrings
    displayName: 'Docstring validation'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas
      doc/make.py html
    displayName: 'Building docs'
    condition: true

  - script: |
      az extension add --name storage-preview
      az storage blob upload-batch -s $SOURCE_PATH -d '$web'
    displayName: 'Publishing docs (Azure storage)'
    condition: true
    env:
      SOURCE_PATH: $(Build.SourcesDirectory)/doc/build/html/
      AZURE_STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=https;AccountName=$(AZURE_STORAGE_ACCOUNT);AccountKey=$(AZURE_STORAGE_ACCESS_KEY)"

  - script: |
      if [ "$(Build.SourceBranch)" == "refs/heads/master" ]; then
          export NAME="master"
      else
          export NAME=$(System.PullRequest.PullRequestId)
      fi
      export PR_DIR=$REPO_DIR/pr/$NAME
      git clone https://$(GITHUB_DOC_TOKEN)@github.com/pandas-dev/pandas-docs-travis.git $REPO_DIR
      mkdir -p $PR_DIR
      rm -rf $PR_DIR/*
      cp -r doc/build/html/* $PR_DIR/
      cp LICENSE $PR_DIR/
      cd $REPO_DIR
      git add --all .
      git config user.email "pandas-docs-bot@localhost"
      git config user.name "pandas-docs-bot"
      git commit -m "Added pandas documentation for $NAME"
      git push
    displayName: 'Publishing docs (GitHub pages)'
    condition: true
    env:
      REPO_DIR: $(Build.ArtifactStagingDirectory)/pandas-docs-travis
