# Adapted from https://github.com/numba/numba/blob/master/azure-pipelines.yml
jobs:
# Mac and Linux could potentially use the same template
# except it isn't clear how to use a different build matrix
# for each, so for now they are separate
- template: ci/azure/macos.yml
  parameters:
    name: macOS
    vmImage: xcode9-macos10.13
# - template: ci/azure/linux.yml
#   parameters:
#     name: Linux
#     vmImage: ubuntu-16.04

# Windows Python 2.7 needs VC 9.0 installed, and not sure
# how to make that a conditional task, so for now these are
# separate templates as well
- template: ci/azure/windows.yml
  parameters:
    name: Windows
    vmImage: vs2017-win2017
- template: ci/azure/windows-py27.yml
  parameters:
    name: WindowsPy27
    vmImage: vs2017-win2017

- job: 'Linting'
  continueOnError: 'true'  # XXX this doesn't seem to be working, specifying in each step
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'
  - script: python -m pip install flake8
    displayName: 'Installing flake8'
    continueOnError: 'false'
  # We're ignoring the following codes across the board
  #E402,  # module level import not at top of file
  #E731,  # do not assign a lambda expression, use a def
  #E741,  # do not use variables named 'l', 'O', or 'I'
  #W503,  # line break before binary operator
  #C406,  # Unnecessary (list/tuple) literal - rewrite as a dict literal.
  #C408,  # Unnecessary (dict/list/tuple) call - rewrite as a literal.
  #C409,  # Unnecessary (list/tuple) passed to tuple() - (remove the outer call to tuple()/rewrite as a tuple literal).
  #C410   # Unnecessary (list/tuple) passed to list() - (remove the outer call to list()/rewrite as a list literal).

  # pandas/_libs/src is C code, so no need to search there.
  - script: flake8 pandas --filename=*.py --exclude pandas/_libs/src --ignore=C406,C408,C409,E402,E731,E741,W503
    displayName: 'Linting *.py code'
    continueOnError: 'true'
  - script: flake8 pandas --filename=*.pyx --select=E501,E302,E203,E111,E114,E221,E303,E128,E231,E126,E265,E305,E301,E127,E261,E271,E129,W291,E222,E241,E123,F403,C400,C401,C402,C403,C404,C405,C406,C407,C408,C409,C410,C411
    displayName: 'Linting *.pyx code'
    continueOnError: true
  - script: flake8 pandas/src --filename=*.pxi.in --select=E501,E302,E203,E111,E114,E221,E303,E231,E126,F403
    displayName: 'Linting *.pxi.in'
    continueOnError: 'true'
  - script: flake8 pandas/_libs --filename=*.pxd --select=E501,E302,E203,E111,E114,E221,E303,E231,E126,F403
    displayName: 'Linting *.pxd'
    continueOnError: 'true'
  - script: flake8 setup.py --ignore=E402,E731,E741,W503
    displayName: 'Linting setup.py'
    continueOnError: 'true'
  - script: flake8 scripts --filename=*.py --ignore=C408,E402,E731,E741,W503
    displayName: 'Linting scripts'
    continueOnError: 'true'
  # TODO I think flake8 the scripts directory already checks the scripts/tests
  # will remove later
  #- script: flake8 scripts/tests --filename=*.py
  #  displayName: 'Linting scripts tests'
  - script: flake8 asv_bench/benchmarks/  --exclude=asv_bench/benchmarks/*.py --ignore=F811,C406,C408,C409,C410
    displayName: 'Linting asv benchmarks'
    continueOnError: 'true'
  - script: flake8 doc/make.py doc/source/conf.py --ignore=E402,E731,E741,W503
    displayName: 'Linting doc scripts'

  - script: python -m pip install cpplint
    displayName: 'Installing cpplint'
    continueOnError: 'false'
  # readability/casting: Warnings about C casting instead of C++ casting
  # runtime/int: Warnings about using C number types instead of C++ ones
  # build/include_subdir: Warnings about prefacing included header files with directory

  # We don't lint all C files because we don't want to lint any that are built
  # from Cython files nor do we want to lint C files that we didn't modify for
  # this particular codebase (e.g. src/headers, src/klib, src/msgpack). However,
  # we can lint all header files since they aren't "generated" like C files are.
  # TODO the next 3 commands are the same changing just the path, we should avoid repeating
  # them, and have kind of loop thing
  - script: cpplint --quiet --extensions=c,h --headers=h --filter=-readability/casting,-runtime/int,-build/include_subdir --recursive pandas/_libs/src/*.h
    displayName: 'Linting *.c and *.h (*.h)'
    continueOnError: 'true'
  - script: cpplint --quiet --extensions=c,h --headers=h --filter=-readability/casting,-runtime/int,-build/include_subdir --recursive pandas/_libs/src/parser
    displayName: 'Linting *.c and *.h (parser)'
    continueOnError: 'true'
  - script: cpplint --quiet --extensions=c,h --headers=h --filter=-readability/casting,-runtime/int,-build/include_subdir --recursive pandas/_libs/src/ujson
    displayName: 'Linting *.c and *.h (ujson)'
    continueOnError: 'true'
  - script: cpplint --quiet --extensions=c,h --headers=h --filter=-readability/casting,-runtime/int,-build/include_subdir --recursive pandas/_libs/tslibs/src/datetime
    displayName: 'Linting  pandas/_libs/tslibs/src/datetime'

- job: 'Checks'
  continueOnError: 'true'  # XXX this doesn't seem to be working, specifying in each step
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'
      architecture: 'x64'
  # Check for imports from pandas.core.common instead of `import pandas.core.common as com`
  - bash: \! grep -R --include="*.py*" -E "from pandas.core.common import " pandas
    displayName: 'Check for non-standard imports'
    continueOnError: 'true'
  - bash: \! grep -r -E --include '*.py' 'pytest\.warns' pandas/tests/
    displayName: 'Check for pytest warns'
    continueOnError: 'true'
  # Check for the following code in testing: `np.testing` and `np.array_equal`
  - bash: \! grep -r -E --include '*.py' --exclude testing.py '(numpy|np)(\.testing|\.array_equal)' pandas/tests/
    displayName: 'Check for invalid testing'
    continueOnError: 'true'
  # Check for the following code in the extension array base tests: `tm.assert_frame_equal` and `tm.assert_series_equal`
  - bash: \! grep -r -E --include '*.py' --exclude base.py 'tm.assert_(series|frame)_equal' pandas/tests/extension/base
    displayName: 'Check for invalid EA testing'
    continueOnError: 'true'
  - bash: \! grep -R --include="*.py" --include="*.pyx" -E "(DEPRECATED|DEPRECATE|Deprecated)(:|,|\.)" pandas
    displayName: 'Check for deprecated messages without sphinx directive'
    continueOnError: 'true'
  - bash: \! grep -R --include="*.py" -E "class\s\S*[^)]:" pandas scripts
    displayName: 'Check for old-style classes'
    continueOnError: 'true'
  - bash: \! grep -R --include="*.rst" -E "[a-zA-Z0-9]\`\`?[a-zA-Z0-9]" doc/source/
    displayName: 'Check for backticks incorrectly rendering because of missing spaces'
    continueOnError: 'true'
  # TODO the next 2 commands are the same changing just the path, we should avoid repeating
  # them, and have kind of loop thing
  # TODO SPHINX_DIRECTIVES should be defined as a variable, as it was in lint.sh. Not
  # sure yet how to define variables with the output of a sctipt, will take care of it later
  # SPHINX_DIRECTIVES=$(echo \
  #   "autosummary|contents|currentmodule|deprecated|function|image|"\
  #   "important|include|ipython|literalinclude|math|module|note|raw|"\
  #   "seealso|toctree|versionadded|versionchanged|warning" | tr -d "[:space:]")
  - bash: \! grep -R --include="*.py" --include="*.pyx" --include="*.rst" -E "\.\. (autosummary|contents|currentmodule|deprecated|function|image|important|include|ipython|literalinclude|math|module|note|raw|seealso|toctree|versionadded|versionchanged|warning):[^:]" ./pandas
    displayName: 'Check for incorrect sphinx directives (./pandas)'
    continueOnError: 'true'
  - bash: \! grep -R --include="*.py" --include="*.pyx" --include="*.rst" -E "\.\. (autosummary|contents|currentmodule|deprecated|function|image|important|include|ipython|literalinclude|math|module|note|raw|seealso|toctree|versionadded|versionchanged|warning):[^:]" ./doc/source
    displayName: 'Check for incorrect sphinx directives (./doc/source)'
