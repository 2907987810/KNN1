name: CI

on:
  push:
    branches: master
  pull_request:
    branches: master

env:
  ENV_FILE: environment.yml
  # TODO: remove export PATH=... in each step once this works
  # PATH: $HOME/miniconda3/bin:$PATH

jobs:
  tests:
    name: Run tests
    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres:latest
        ports:
        - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      mysql:
        image: mysql:latest
        ports:
        - 3306/tcp
        env:
          MYSQL_ROOT_PASSWORD: password
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries 5

    strategy:
      matrix:
        kind: ['main', 'zh-locale + db', 'py37']
        include:
        - kind: 'main'
          os: ubuntu-latest
          env_file: travis-36-cov.yaml
          pattern: "((not slow and not network) or (single and db))"
          pandas_testing_mode: deprecate
          coverage: true

        - kind: 'zh-locale'
          os: ubuntu-latest
          env_file: travis-36-locale.yaml
          pattern: "((not slow and not network) or (single and db))"
          locale_override: zh_CN.UTF-8

        - kind: 'py37'
          os: ubuntu-latest
          env_file: travis-37.yaml
          pattern: "(not slow and not network)"

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Create PostgreSQL database
      run: |
        sudo apt-get install -y postgresql-client
        psql --host 127.0.0.1 \
             --port ${{ job.services.postgres.ports['5432'] }} \
             --username postgres \
             --command 'CREATE DATABASE pandas_nosetest;'
      # if: matrix.coverage
      if: true

    - name: Create MySQL database
      run: |
        sudo apt-get install -y mysql-client
        mysql --host 127.0.0.1 \
              --port ${{ job.services.mysql.ports['3306'] }} \
              --user root \
              --password password \
              --execute "CREATE DATABASE pandas_nosetest;"
      # if: matrix.coverage
      if: true

    - name: Setup environment and build pandas
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        ci/setup_env.sh
      env:
        ENV_FILE: ci/deps/${{ matrix.env_file }}
        LOCALE_OVERRIDE: ${{ matrix.locale_override }}

    - name: Run tests
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/run_tests.sh
      env:
        PATTERN: ${{ matrix.pattern }}
        PANDAS_TESTING_MODE: ${{ matrix.pandas_testing_mode }}
        COVERAGE: ${{ matrix.coverage }}
        LOCALE_OVERRIDE: ${{ matrix.locale_override }}

  checks:
    name: Checks
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: Looking for unwanted patterns
      run: ci/code_checks.sh patterns
      if: true

    - name: Setup environment and build pandas
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        ci/setup_env.sh
      if: true

    - name: Linting
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/code_checks.sh lint
      if: true

    - name: Dependencies consistency
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/code_checks.sh dependencies
      if: true

    - name: Checks on imported code
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/code_checks.sh code
      if: true

    - name: Running doctests
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/code_checks.sh doctests
      if: true

    - name: Docstring validation
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/code_checks.sh docstrings
      if: true

    - name: Typing validation
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/code_checks.sh typing
      if: true

    - name: Testing docstring validation script
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        pytest --capture=no --strict scripts
      if: true

    - name: Running benchmarks
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        cd asv_bench
        asv check -E existing
        git remote add upstream https://github.com/pandas-dev/pandas.git
        git fetch upstream
        if git diff upstream/master --name-only | grep -q "^asv_bench/"; then
            asv machine --yes
            ASV_OUTPUT="$(asv dev)"
            if [[ $(echo "$ASV_OUTPUT" | grep "failed") ]]; then
                echo "##vso[task.logissue type=error]Benchmarks run with errors"
                echo "$ASV_OUTPUT"
                exit 1
            else
                echo "Benchmarks run without errors"
            fi
        else
            echo "Benchmarks did not run, no changes detected"
        fi
      if: true

  web_and_docs:
    name: Web and docs
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup environment and build pandas
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        ci/setup_env.sh

    - name: Build website
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        python web/pandas_web.py web/pandas --target-path=web/build

    - name: Build documentation
      run: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        # Next we should simply have `doc/make.py --warnings-are-errors`,
        # everything else is required because the ipython directive doesn't fail the build on errors
        # (https://github.com/ipython/ipython/issues/11547)
        doc/make.py --warnings-are-errors | tee sphinx.log ; SPHINX_RET=${PIPESTATUS[0]}
        echo "Sphinx exit status: $SPHINX_RET"
        ls
        grep -B1 "^<<<-------------------------------------------------------------------------$" sphinx.log ; IPY_RET=$(( $? != 1 ))
        echo "Grep to detect IPython code block errors exit: $IPY_RET"
        exit $(( $SPHINX_RET + $IPY_RET ))

    - name: Merge website and docs
      run: |
        mkdir -p pandas_web/docs
        cp -r web/build/* pandas_web/
        cp -r doc/build/html/* pandas_web/docs/

    - name: Create artifact
      run: |
        tar -czvf pandas_web.tar.gz pandas_web

    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: pandas_web
        path: pandas_web.tar.gz
